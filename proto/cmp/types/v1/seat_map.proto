syntax = "proto3";

package cmp.types.v1;

import "cmp/types/v1/description.proto";
import "cmp/types/v1/file.proto";
import "cmp/types/v1/language.proto";
import "cmp/types/v1/localized.proto";
import "google/protobuf/wrappers.proto";

// Represents a basic seat with optional features and restrictions. Each seat has a
// unique identifier, a location within the seat map, and can have various static
// features and restrictions associated with it.
message Seat {
  // Unique identifier for the seat, such as "12B" or "A26". This identifier must be
  // unique within the section to which this seat belongs.
  string id = 1;

  // The location of the seat within the seat map. This can be defined using either
  // a vector (SVG) or bitmap format.
  cmp.types.v1.SeatLocation location = 2;

  // Static features associated with the seat, such as type, amenities, etc.
  repeated cmp.types.v1.LocalizedSeatAttributeSet features = 3;

  // Restrictions associated with the seat, such as age limits or accessibility requirements.
  repeated cmp.types.v1.LocalizedSeatAttributeSet restrictions = 4;
}

// List of seats
message SeatList {
  repeated cmp.types.v1.Seat seats = 1;
}

// A Section represents a distinct area within a venue, which can be defined by
// various attributes. It can be a block of rows in a theater, a specific area in a
// concert venue such as the stage or standing area, a section of seating in a
// stadium, or a section in an airplane. Each Section is uniquely identified and can
// contain information about its seats, layout, and additional properties.
message Section {
  // Level, section or row identifier, e.g., "Upper", "Balcony" or "Section 101",
  // "Orchestra" or "A", "12". Must be unique for each section.
  string id = 1;

  // List of localized names Human readable names of the section
  repeated cmp.types.v1.LocalizedString names = 2;

  // Seats in this section.
  oneof seat_info {
    // List of seats in this section.
    cmp.types.v1.SeatList seat_list = 3;

    // Total number of seats in this section as an integer.
    google.protobuf.Int32Value total_seats = 4;
  }

  // Image that provides a visual representation of the section's layout, which can
  // be either a vector (SVG) or bitmap image.
  //
  // If set, it is assumed that this image is used for locating seats within the
  // section. (the `SeatLocation` message type in the `Seat` message above is
  // used to represent seat location inside this image).
  cmp.types.v1.Image image = 5;

  // A list of localized descriptions for this section, useful for providing
  // information about features and amenities in multiple languages.
  repeated cmp.types.v1.LocalizedDescriptionSet localized_descriptions = 6;

  // Nested sections within this section, allowing for a hierarchical representation
  // of the venue's layout.
  repeated cmp.types.v1.Section sections = 7;
}

// High-level representation of a seat map, which defines the layout and structure
// of seating within a venue. This message provides a comprehensive overview of the
// seating arrangement, including sections, images, and localized descriptions.
//
// ![Diagram](https://storage.googleapis.com/docs-cmp-files/diagrams/proto/cmp/types/v1/seat_map.proto.dot.xs.svg)
// [Open Message Diagram](https://storage.googleapis.com/docs-cmp-files/diagrams/proto/cmp/types/v1/seat_map.proto.dot.svg)
message SeatMap {
  // Unique identifier for the seat map
  string id = 1;

  // A list of sections within the seat map. Each section represents a distinct area
  // within the venue, such as rows, sections, levels, or blocks of seats. This
  // field is recursive, allowing for hierarchical structuring of the seating
  // layout.
  repeated cmp.types.v1.Section sections = 2;

  // Image that provides a visual representation of the seat map, illustrating the
  // location and arrangement of seats. The image can be in vector format (SVG) or
  // bitmap format.
  cmp.types.v1.Image image = 3;

  // A list of localized descriptions for the seat map. This can be used to describe
  // features and amenities of the seating arrangement in multiple languages.
  // The languages should match those requested in SeatMapRequest
  repeated cmp.types.v1.LocalizedDescriptionSet localized_descriptions = 4;
}

// List of _only_ seat IDs to be used for seat selection or seat availability.
message SeatInventory {
  // List of seat IDs
  repeated string ids = 1;
}

// Represents the inventory of seats for a specific section and all its inner
// sections. This message is used for both seat availability and seat selection
// purposes, providing information about either the remaining or selected seats
// within the section.
message SectionInventory {
  // Unique identifier for the section. Must be unique within the seat map.
  string id = 1;

  oneof seat_info {
    // List of individual seat IDs within this section.
    cmp.types.v1.SeatInventory seat_list = 2;

    // Seat count in this section, representing either the remaining seats for
    // availability purposes or the selected seats for seat selection messages.
    //
    // This field is intended for sections without individual seat details, such as
    // standing areas at a concert or an arena.
    google.protobuf.Int32Value seat_count = 3;
  }

  // Nested inner sections within this section, allowing for a hierarchical
  // representation of seat inventory. Each inner section can have its own seat
  // information and further nested sections.
  repeated cmp.types.v1.SectionInventory sections = 4;
}

// Represents the inventory of seats for a specific seat map, used for both seat
// selection and seat availability purposes. This message provides a comprehensive
// overview of the seating inventory, including detailed information about each
// section and its inner sections.
message SeatMapInventory {
  // Unique identifier for the seat map that this Inventory refers to.
  string id = 1;

  // A list of seat inventories for each section within the seat map. This field
  // includes detailed seat information and supports nested sections, allowing for a
  // hierarchical representation of the seating arrangement.
  repeated cmp.types.v1.SectionInventory sections = 2;
}

message LocalizedSeatAttributeSet {
  cmp.types.v1.Language language = 1;
  repeated cmp.types.v1.SeatAttribute seat_attributes = 2;
}
/* Helper messages */

// Defines a static attribute for a seat, which can be used for specifying features
// and restrictions. Attributes include a name, a human-readable description, and a
// value that can be used for various conditions or restrictions.
//
// FIXME: Can we make this a big enum?
message SeatAttribute {
  // Name of the attribute, used to identify the feature or restriction.
  string name = 1;

  // Human-readable description of the attribute, providing more details about its purpose.
  string description = 2;

  // Integer value associated with the attribute, which can be used for conditions
  // or restrictions, such as "min_age".
  int32 value = 3;
}

// Enumerates the types of areas that can be defined within a seat map. This is used
// for specifying the shape of regions in bitmap images.
enum AreaType {
  AREA_TYPE_UNSPECIFIED = 0;
  AREA_TYPE_RECTANGLE = 1;
  AREA_TYPE_CIRCLE = 2;
  AREA_TYPE_POLYGON = 3;
}

// Defines the location of a seat within a bitmap image seat map. This information
// is generally used with the HTML `area` tag to specify clickable regions.
message BitmapSeatLocation {
  // The type of area defining the seat location, such as rectangle, circle, or polygon.
  cmp.types.v1.AreaType type = 1;

  // Coordinates defining the area. The format of the coordinates depends on the
  // area type (e.g., top-left (x1,y1) and bottom-right (x2,y2) corners for a
  // rectangle: `<area shape="rect" coords="x1,y1,x2,y2"`).
  repeated int32 coordinates = 2;
}

// Defines the location of a seat within an SVG (vector) seat map. This is typically
// used for labeling elements within the SVG.
message VectorSeatLocation {
  // Label for the seat location in the SVG, e.g., "section-TERRACE-26-34-2-label".
  string label = 1;
}

// Represents the location of a seat within a seat map, which can be defined using
// either a vector (SVG) or bitmap format. This message encapsulates both types of
// seat location definitions.
message SeatLocation {
  // One of the possible seat location types: vector (SVG) or bitmap.
  oneof location {
    // Vector-based seat location, used for SVG maps.
    cmp.types.v1.VectorSeatLocation vector = 1;

    // Bitmap-based seat location, used for HTML image maps.
    cmp.types.v1.BitmapSeatLocation bitmap = 2;
  }
}
