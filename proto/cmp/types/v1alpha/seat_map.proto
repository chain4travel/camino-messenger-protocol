syntax = "proto3";

package cmp.types.v1alpha;

import "cmp/types/v1alpha/description.proto";

// Basic representation of a seat with optional features.
message Seat {
  // Unique identifier, e.g., "12B", "A26". Must be unique inside the section that
  // this seat belongs to.
  string id = 1;

  // Seat location
  SeatMapLocation location = 2;

  // Static seat features
  repeated SeatAttribute features = 3;

  // Restrictions
  repeated SeatAttribute restrictions = 4;
}

// FIXME: Can we make this a big enum?
message SeatAttribute {
  // Static attributes to be used for features and restrictions
  string name = 1;

  // Human readable description
  string description = 2;

  // Value to be used for restrictions or conditions like "min_age"
  int32 value = 3;
}

enum AreaType {
  AREA_TYPE_UNSPECIFIED = 0;
  AREA_TYPE_RECTANGLE = 1;
  AREA_TYPE_CIRCLE = 2;
  AREA_TYPE_POLYGON = 3;
}

// Image location for seat maps with bitmap images. This info is generallt used with
// HTML `area` tag.
message BitmapSeatLocation {
  AreaType type = 1;
  repeated int32 coordinates = 2;
}

// Vector Seat Location for SVG
message VectorSeatLocation {
  // Label, e.g. "section-TERRACE-26-34-2-label" for SVG
  string label = 1;
}

// Representation of a seat location in SVG or bitmap.
message SeatMapLocation {
  // Seat location it should be one of vector (SVG) or bitmap location message
  // types.
  oneof location {
    VectorSeatLocation vector = 1;
    BitmapSeatLocation bitmap = 2;
  }
}

// Section could be a block of rows or a specific area in a venue like a stage, or a
// section in a plane.
message Section {
  // Level, section or row identifier, e.g., "Upper", "Balcony" or "Section 101",
  // "Orchestra" or "A", "12". Must be unique for each section.
  string id = 1;

  // Human readable name of the section
  string name = 2;

  // Collection of seats in this section. If it contains inner sections, this field
  // can be left empty.
  repeated Seat seats = 3;

  // Location image URL for the seat map. This can be a SVG or bitmap. If this field
  // is set, it is assumed that seats in this section is using this image URL for
  // seat location. (the `SeatMapLocation` message type in the `Seat` message)
  string image_url = 4;

  // Localized description set for this section. This can be used for example to
  // describe features and amenities.
  cmp.types.v1alpha.LocalizedDescriptionSet localized_description_set = 5;

  // Recursive presentation of inner sections.
  repeated Section sections = 6;
}

// High-level representation of a seat map.
//
// ![Diagram](https://storage.googleapis.com/docs-cmp-files/diagrams/proto/cmp/types/v1alpha/seat_map.proto.dot.xs.svg)
// [Open Message Diagram](https://storage.googleapis.com/docs-cmp-files/diagrams/proto/cmp/types/v1alpha/seat_map.proto.dot.svg)
message SeatMap {
  // Unique identifier for the seat map
  string id = 1;

  // This field represents a recursive `Section` message type that can be used to
  // describe rows, sections, levels etc.
  repeated Section sections = 2;

  // Location image URL for the seat map. This can be a SVG or bitmap.
  string image_url = 3;

  // Localized description set for this map. This can be used for example to
  // describe features and amenities.
  cmp.types.v1alpha.LocalizedDescriptionSet localized_description_set = 4;
}

// Seat inventory list
message SeatInventory {
  // List of seat IDs
  repeated string ids = 1;
}

// Total and remaining number of seats in a section.
message SeatCounts {
  // Total number of seats
  int32 total_seat_count = 1;

  // Remaining number of seats available for booking
  int32 remaining_seat_count = 2;
}

// Selection of seats for given section and all its inner sections. Used for seat
// availability and seat selection messages.
message SectionInventory {
  // Unique identifier for the section. Must be unique within the seat map.
  string id = 1;

  oneof seats {
    // Seats in this section. Contains a list of individual seat IDs.
    SeatInventory seat_inventory = 2;

    // Seat counts in this section.
    //
    // This field is intended to be used with sections that do not have individual
    // seat information. For example a standing area for a concert or an arena. It
    // includes total and remaining seat counts.
    SeatCounts seat_counts = 3;
  }

  // Inner sections in this section.
  repeated SectionInventory sections = 4;
}

// Inventory of seats for a given seat map used for seat selection or seat
// availability.
message SeatMapInventory {
  // Unique identifier for the seat map that this Inventory refers to.
  string id = 1;

  // Seat inventory including the recursive inner sections
  repeated SectionInventory sections = 2;
}
