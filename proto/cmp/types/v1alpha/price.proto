syntax = "proto3";

package cmp.types.v1alpha;

import "cmp/types/v1alpha/currency.proto";
import "cmp/types/v1alpha/price_type.proto";

// ### PriceDetail
//
// This message consists of the value as a Price object and additional fields as
// binding, concept, and breakdown.
//
// Breakdown is a recursively inhereted object of PriceDetail. This way complex
// pricing structures can be represented.
//
// ![Diagram](https://storage.googleapis.com/docs-cmp-files/diagrams/proto/cmp/types/v1alpha/price.proto.dot.xs.svg)
// [Open Message Diagram](https://storage.googleapis.com/docs-cmp-files/diagrams/proto/cmp/types/v1alpha/price.proto.dot.svg)
message PriceDetail {
  // Principle price element
  Price price = 1;

  // Identification whether the price must be respected towards the end-user
  // and the product or service cannot be offered for a lower price.
  bool binding = 2;

  // Description of the product or service this price(element) is valid for.
  string description = 3;

  // If not specified, the default of the boolean is false which means it is
  // included in the price. If set to True, it means that this PriceDetail is only
  // payable locally. For example local tourism tax that you pay at the reception of
  // a hotel. Intended to be used in the breakdown.
  bool locally_payable = 4;

  // Type of price and price code
  PriceTypeCode price_type_code = 5;

  // We can use a single PriceDetail to represent a price breakdown.
  repeated PriceDetail breakdown = 6;
}

// ### Simple Price type message Price
//
// Value of the price, this should be an integer converted to string.
//
// This field is a string intentionally. Because the currency can be a crypto
// currency, we need a reliable way to represent big integers as most of the crypto
// currencies have 18 decimals precision.
//
// Definition of the price message: The combination of "value" and "decimals" fields
// express always the value of the currency, not of the fraction of the currency [
// ETH not wei, CAM and not aCAM, BTC and not Satoshi, EUR not EUR-Cents ] Be aware
// that partners should not do rounding with crypto currencies.
//
// Example implementations: off-chain payment of 100 â‚¬ or 100 $: value=10000
// decimals=2 iso_currency=EUR or USD
//
// On-chain payment of 100.65 EURSH value=10065 decimals=2 contract_address=0x...
//  this currency has 5 decimals on Columbus and conclusively to create the
//  transaction value, 10065 must be divided by 10^2 = 100.65 EURSH and created in
//  its smallest fraction by multiplying  100.65 EURSH * 10^5 => 10065000 (example
//  conversion to bigint without losing accuracy: bigint(10065) * 10^(5-2))
//
// On-chain payment of 0.0065 BTC value=65 decimals=4 contract_address=0x... Using
//  the contract address, we get the decimals decimals and the currency name or
//  abbreviation: 8 decimals & WBTC Because we see 4 decimals specified in the
//  message we divide 65 by 10^4 == 0.0065 WBTC (for showing in the front-end UIs)
//
//  This currency has 8 decimals on-chain and conclusively to use the value of
//  0.0065 for on-chain operations must be converted to big integer as bigint(65) *
//  10^(8-4) == 650000
//
// On-chain payment of 1 nCAM value=1 decimals=9 this currency has denominator 18 on
//  Columbus and conclusively to mint the value of 1 nCam must be divided by 10^9 =
//  0.000000001 CAM and minted in its smallest fraction by multiplying 0.000000001 *
//  10^18 => 1000000000 aCAM
message Price {
  string value = 1;
  int32 decimals = 2;
  Currency currency = 3;
}
