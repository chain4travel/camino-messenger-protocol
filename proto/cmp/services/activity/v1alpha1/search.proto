syntax = "proto3";

// ### Activity Services
//
// The Activity services are used for both hotels and holiday homes, often called short term rentals.
//
// Any search message response in the Camino Messenger Protocol only includes dynamic data. Static data can
// be cached and kept up to data with the Product List and Product Details messages.
//
// This package is a **WIP**.
package cmp.services.activity.v1alpha1;

import "cmp/services/activity/v1alpha1/search_result_types.proto";
import "cmp/types/v1alpha1/common.proto";
import "cmp/types/v1alpha1/location.proto";
import "cmp/types/v1alpha1/search.proto";
import "cmp/types/v1alpha1/travel_period.proto";
import "cmp/types/v1alpha1/traveller.proto";

// ### Activity Search Request
//
// Search request for Activities
// ![Diagram](https://storage.googleapis.com/docs-cmp-files/diagrams/proto/cmp/services/activity/v1alpha1/search.proto.dot.xs.svg)
// [Open Message Diagram](https://storage.googleapis.com/docs-cmp-files/diagrams/proto/cmp/services/activity/v1alpha1/search.proto.dot.svg)
message ActivitySearchRequest {
  // Message Header. Contains api version, message info string and end-user wallet address
  cmp.types.v1alpha1.Header header = 1;

  // An identifier for external sessions, aiding in tracking and continuity across sessions.
  string external_session_id = 2;

  // Search parameters. Example: inclusion of OnRequest options and inclusion of only the cheapest or all options.
  cmp.types.v1alpha1.SearchParameters search_parameters = 3;

  // Travel period
  cmp.types.v1alpha1.TravelPeriod travel_period = 4;

  // Travellers
  repeated cmp.types.v1alpha1.Traveller travellers = 5;

  // ### Source Location
  //
  // For search, set only one of the field at once.
  //
  // This one of field enforces only one of the fields below. They all share memory,
  // setting one will remove the others.
  oneof source_location {
    // FIXME: Do we need a list of location code here? Other fields are not lists.
    cmp.types.v1alpha1.LocationCodes source_location_codes = 6;

    // Single geographic point represented by two double fields.
    cmp.types.v1alpha1.Coordinate source_location_coordinate = 7;

    // Geo tree type, representted by Country, Region, and City_or_Resort.
    cmp.types.v1alpha1.GeoTree source_location_geo_tree = 8;

    // Geo circle. Represented by a coordinate and a distance for radius
    cmp.types.v1alpha1.GeoCircle source_location_geo_circle = 9;

    // Geo polygon. Represented by a list of coordinate points.
    cmp.types.v1alpha1.GeoPolygon source_location_geo_polygon = 10;
  }

  // ### Service Location
  //
  // For search, set only one of the field at once.
  //
  // This one of field enforces only one of the fields below. They all share memory,
  // setting one will remove the others.
  //
  // FIXME: Why we don't have the `location_code` here?
  oneof service_location {
    // Single geographic point represented by two double fields.
    cmp.types.v1alpha1.Coordinate service_location_coordinate = 11;

    // Geo tree type, representted by Country, Region, and City_or_Resort.
    cmp.types.v1alpha1.GeoTree service_location_geo_tree = 12;

    // Geo circle. Represented by a coordinate and a distance for radius
    cmp.types.v1alpha1.GeoCircle service_location_geo_circle = 13;

    // Geo polygon. Represented by a list of coordinate points.
    cmp.types.v1alpha1.GeoPolygon service_location_geo_polygon = 14;
  }
}

message ActivitySearchResponse {
  // Message Header. Contains api version, message info string and end user wallet address.
  cmp.types.v1alpha1.Header header = 1;

  // Search response metadata
  cmp.types.v1alpha1.SearchResponseMetadata metadata = 2;

  // Unique combinations of bookable search results
  repeated ActivitySearchResult results = 3;
}

// ### Activity Search Service
//
// Takes `ActivitySearchRequest` message type and returns `ActivitySearchResponse` message type.
service ActivitySearchService {
  rpc ActivitySearch(ActivitySearchRequest) returns (ActivitySearchResponse);
}
