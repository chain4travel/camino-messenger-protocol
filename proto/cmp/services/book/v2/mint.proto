syntax = "proto3";

package cmp.services.book.v2;

import "cmp/types/v1/common.proto";
import "cmp/types/v1/language.proto";
import "cmp/types/v1/payment.proto";
import "cmp/types/v1/pubkey.proto";
import "cmp/types/v1/traveller.proto";
import "cmp/types/v1/uuid.proto";
import "cmp/types/v2/price.proto";
import "google/protobuf/timestamp.proto";

message MintRequest {
  // Message header
  cmp.types.v1.RequestHeader header = 1;

  // This must be a UUID according to RFC 4122
  cmp.types.v1.UUID validation_id = 2;

  string external_session_id = 3;

  cmp.types.v1.Language language = 4;

  string market = 5;

  string booking_reference = 6;

  repeated cmp.types.v1.ExtensiveTraveller travellers = 7;

  // The comments field is meant to pass noncommittal remarks entered by the
  // end-consumer about the service reservation,  like "non-smoking room please",
  // "top floor room please".
  string comment = 8;

  // Public keys that will be used to encrypt the private booking data
  repeated cmp.types.v1.PublicKey public_keys = 9;

  // Buyer's address. Only this address should be allowed to buy the `BookingToken`
  // on chain.
  string buyer_address = 10;

  // This field is only relevant for off chain virtual credit card payments.
  cmp.types.v1.AdditionalPaymentInfo additional_payment_info = 11;
}

message MintResponse {
  // Message header
  cmp.types.v1.ResponseHeader header = 1;

  // This must be a UUID according to RFC 4122
  cmp.types.v1.UUID mint_id = 2;

  // This must be a UUID according to RFC 4122
  cmp.types.v1.UUID validation_id = 3;

  string provider_booking_reference = 4;

  // Timestamp of the booking in the inventory system of the supplier.
  google.protobuf.Timestamp provider_booking_timestamp = 5;

  // Price of the `BookingToken`. This field is meant to be populated by the
  // supplier plugin and used by the supplier bot while minting the `BookingToken`.
  cmp.types.v2.Price price = 6;

  // ID of the token that represents the booking of the service. This will be
  // populated by the supplier bot after the `BookingToken` is minted on chain.
  uint64 booking_token_id = 7;

  // URI of the token that represents the booking of the service
  string booking_token_uri = 8;

  // Mint transaction ID that will be populated by the supplier bot after the
  // `BookingToken` is minted on chain.
  string mint_transaction_id = 9;

  // On chain booking token should be only buyable until this timestamp and should
  // expire after that.
  google.protobuf.Timestamp buyable_until = 10;

  // Transaction ID of the buy operation. This field is populated by the distributor
  // (buyer) bot after the buy operation and passed to the distributor middleware
  // (partner plugin) in the mint response.
  //
  // This field is not meant for the supplier.
  string buy_transaction_id = 11;
}

// ![Diagram](https://storage.googleapis.com/docs-cmp-files/diagrams/proto/cmp/services/book/v1/mint.proto.dot.xs.svg)
// [Open Message Diagram](https://storage.googleapis.com/docs-cmp-files/diagrams/proto/cmp/services/book/v1/mint.proto.dot.svg)
service MintService {
  rpc Mint(MintRequest) returns (MintResponse);
}
