syntax = "proto3";

// ## Accommodation Services
//
// The Accommodation services are used for both hotels and holiday homes, often called short term rentals.
//
// Any search message response in the Camino Messenger Protocol only includes dynamic data. Static data can
// be cached and kept up to data with the Product List and Product Details messages.
//
// This package is a **WIP**.
package cmp.services.accommodation.v1alpha1;

import "cmp/services/accommodation/v1alpha1/search_parameters_types.proto";
import "cmp/services/accommodation/v1alpha1/search_result_types.proto";
import "cmp/services/accommodation/v1alpha1/unit_types.proto";
import "cmp/types/v1alpha1/common.proto";
import "cmp/types/v1alpha1/search.proto";
import "cmp/types/v1alpha1/travel_period.proto";
import "cmp/types/v1alpha1/traveller.proto";

// ### Accommodation Search Request Message Type
//
// The `Accommodation Search Request` message type facilitates the request for accommodations like hotel and holiday
// home searches within the platform. In the request the market, language and currency are specified at the top-level.
// In the Unit we specify the details of the trip like dates, properties or locations or filters.
// The purpose of such a structure is to allow for multi-room and multi-property searches, so that several rooms or houses
// can be requested for the same dates and location or for the purpose of a tour or roadtrip, several accommodations for
// sequential dates and different locations.
//
// Developers leveraging this message type should ensure proper validation and handling, especially considering fields
// that are still under review, like `speech_request`.
message AccommodationSearchRequest {
  // Message Header. Contains api version, message info string and end-user wallet address
  cmp.types.v1alpha1.Header header = 1;

  // Search request metadata
  cmp.types.v1alpha1.SearchRequestMetadata metadata = 2;

  // Generic Search Parameters
  // Ex: Inclusion of OnRequest options and inclusion of only the cheapest or all options.
  cmp.types.v1alpha1.SearchParameters search_parameters_generic = 3;

  // Accommodation Specific Search Parameters
  // Ex: Specific search parameters like geo location, meal plan, rate plan and rate rules.
  AccommodationSearchParameters search_parameters_accommodation = 4;

  // Travel period
  cmp.types.v1alpha1.TravelPeriod travel_period = 5;

  // Travellers
  repeated cmp.types.v1alpha1.Traveller travellers = 6;

  // Unit Types
  repeated UnitType unit_types = 7;
}

// ### Accommodation Search Response
//
// The `Accommodation Search Response` message type facilitates the response for accommodations like hotel and holiday
// home searches within the platform. In the response a search_id must be included and a search_option_id for every bookable
// option responded. Included, compulsary and optional services can be included. A simple "free cancellation upto" can
// be set or full cancellation pilicies can be included.
message AccommodationSearchResponse {
  // Message Header. Contains api version, message info string and end user wallet address.
  cmp.types.v1alpha1.Header header = 1;

  // Search response metadata
  cmp.types.v1alpha1.SearchResponseMetadata metadata = 2;

  // Unique combinations of bookable search results, like property,
  repeated AccommodationSearchResult results = 3;
}

// ### Accommodation Search Service definition
//
// ![Diagram](https://storage.googleapis.com/docs-cmp-files/diagrams/proto/cmp/services/accommodation/v1alpha1/search.proto.dot.xs.svg)
// [Open Message Diagram](https://storage.googleapis.com/docs-cmp-files/diagrams/proto/cmp/services/accommodation/v1alpha1/search.proto.dot.svg)
service AccommodationSearchService {
  // Accommodation Search method
  rpc AccommodationSearch(AccommodationSearchRequest) returns (AccommodationSearchResponse);
}
