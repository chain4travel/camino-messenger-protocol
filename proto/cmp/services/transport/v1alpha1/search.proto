syntax = "proto3";

// ## Transport Service
//
// The Transport Service is used for flights, trains, and buses.
//
// Any search message response in the Camino Messenger Protocol only includes dynamic
// data. Static data can be cached and kept up to data with the Product List and
// Product Details messages.
//
// This package is a WIP.
package cmp.services.transport.v1alpha1;

import "cmp/services/transport/v1alpha1/search_result_types.proto";
import "cmp/services/transport/v1alpha1/source_types.proto";
import "cmp/services/transport/v1alpha1/trip_types.proto";
import "cmp/types/v1alpha1/common.proto";
import "cmp/types/v1alpha1/search.proto";
import "cmp/types/v1alpha1/traveller.proto";

// ### Transport Search Request
message TransportSearchRequest {
  // Message Header. Contains api version, message info string and end-user wallet address
  cmp.types.v1alpha1.Header header = 1;

  // Search request metadata
  cmp.types.v1alpha1.SearchRequestMetadata metadata = 2;

  // Search parameters. Example: inclusion of OnRequest options and inclusion of only
  // the cheapest or all options.
  cmp.types.v1alpha1.SearchParameters search_parameters = 6;

  // Content source types for this search request to specify which sources to include
  // Ex: ContentSourceType.CONTENT_SOURCE_TYPE_GDS, ContentSourceType.CONTENT_SOURCE_TYPE_NDC
  // ContentSourceType.CONTENT_SOURCE_TYPE_3RD_PARTY
  repeated ContentSourceType conten_source_types = 5;

  // Travellers
  repeated cmp.types.v1alpha1.Traveller travellers = 7;

  // Travelling trip
  // to avoid confusion of the direction of travel that occurs with terms like "inbound"
  // and "outbound". The travelling trip is also used for "one way" in which case the
  // returning trip is omitted. For tours or roadtrips, multiple requests with just a
  // travelling trip for sequential dates can be submitted to specific suppliers of
  // each part of tour or roadtrip.
  Trip travelling_trip = 9;

  // Returning trip
  // In many cases our travel plans consist of going to a destination and return to
  // the same place where we started
  Trip returning_trip = 10;

  // Remarks
  string remarks = 11;
}

message TransportSearchResponse {
  // Message Header. Contains api version, message info string and end-user wallet address
  cmp.types.v1alpha1.Header header = 1;

  // Search response metadata
  cmp.types.v1alpha1.SearchResponseMetadata metadata = 2;

  // Conten source types for this search request
  // Ex: ContentSourceType.CONTENT_SOURCE_TYPE_GDS, ContentSourceType.CONTENT_SOURCE_TYPE_NDC
  // ContentSourceType.CONTENT_SOURCE_TYPE_3RD_PARTY
  repeated ContentSourceType conten_source_types = 3;

  // Transit search results
  repeated TransportSearchResult results = 4;
}

// ### Transport Search Service
//
// Takes `TransportSearchRequest` message type and returns `TransportSearchResponse` message type.
//
// ![Diagram](https://storage.googleapis.com/docs-cmp-files/diagrams/proto/cmp/services/transport/v1alpha1/search.proto.dot.xs.svg)
// [Open Message Diagram](https://storage.googleapis.com/docs-cmp-files/diagrams/proto/cmp/services/transport/v1alpha1/search.proto.dot.svg)
service TransportSearchService {
  rpc TransportSearch(TransportSearchRequest) returns (TransportSearchResponse);
}
