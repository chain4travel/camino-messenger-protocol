syntax = "proto3";

package cmp.services.seat_map.v2;

import "cmp/types/v1/common.proto";
import "cmp/types/v2/seat_map.proto";
import "cmp/types/v2/search.proto";

// Request for seat map availability data
//
// Requests the seat map availability data for a given map ID
message SeatMapAvailabilityRequest {
  // Message header
  //
  // Header contains information about the request
  cmp.types.v1.RequestHeader header = 1;

  // Required. The identifier of the seat map.
  oneof identifier {
    // Mint Identifier
    //
    // Example: For flights which book before seat selection. In this case, the
    // buyer already have a `mint_id` because the service is already booked (minted
    // on-chain).
    string mint_id = 2;

    // Search result identifier with `search_id` & `result_id`
    //
    // Example: For requesting seat availability for search results. In this case,
    // booking has not happended yet.
    cmp.types.v2.SearchIdentifier search_identifier = 3;
  }
}

// Response for seat map availability request
//
// Contains the seat map availability data for a given map ID
message SeatMapAvailabilityResponse {
  // Message header
  //
  // Header contains information about the response
  cmp.types.v1.ResponseHeader header = 1;

  // Required. Seat map availability data.
  cmp.types.v2.SeatMapInventory seat_map = 2;
}

// Service for requesting seat map availability data
//
// Service is used to request the seat map availability data for a given map ID
//
// ![Diagram](https://storage.googleapis.com/docs-cmp-files/diagrams/proto/cmp/services/seat_map/v1/availability.proto.dot.xs.svg)
// [Open Message Diagram](https://storage.googleapis.com/docs-cmp-files/diagrams/proto/cmp/services/seat_map/v1/availability.proto.dot.svg)
service SeatMapAvailabilityService {
  // Get seat map availability data
  //
  // Requests the seat map availability data for a given map ID
  rpc SeatMapAvailability(SeatMapAvailabilityRequest) returns (SeatMapAvailabilityResponse);
}
